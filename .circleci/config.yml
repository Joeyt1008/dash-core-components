version: 2
jobs:
  

  build-medium-arm64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    working_directory: ~/dash
    steps:
      - run: uname -a
      - run: echo "Hello, Arm!"
      
      - run:
          name: ️️Install and test
          command: |
            uname -m
            sudo apt-get install python3 && sudo apt-get install python3-pip
            python3 --version
            pip3 install --upgrade virtualenv --progress-bar off
            python3 -m venv venv || virtualenv venv && . venv/bin/activate
            python3 -m pip install --upgrade pip
            ls
            pwd
            git clone https://github.com/plotly/dash
            cd dash
            sudo pip install virtualenv --upgrade
            set -eo pipefail
            pip3 install --progress-bar off --no-cache-dir -r dev-requirements.txt
            mkdir packages
            set -eo pipefail
            # build main dash & renderer
            git clone --depth 1 https://github.com/plotly/dash.git dash-main
            cd dash-main && pip3 install -e .[dev] --progress-bar off && renderer build
            python3 setup.py sdist && mv dist/* ../packages/ && cd ..
            # build html
            git clone --depth 1 https://github.com/plotly/dash-html-components.git
            cd dash-html-components && npm ci && npm run build
            python3 setup.py sdist && mv dist/* ../packages && cd ..
            # build dcc
            npm ci && npm run build && python3 setup.py sdist && mv dist/* ./packages && ls -la packages
            rm -rf dash_core_components && ls -la
            set -eo pipefail
            cd packages && mv dash-*.tar.gz main.tar.gz && ls -la
            find . -name "dash_*.gz" | xargs pip install -I --progress-bar off --no-cache-dir
            pip install --no-cache-dir --progress-bar off main.tar.gz[dev,testing]
            pip list | grep dash | xargs pip show && cd ..
            echo $(python -V 2>&1) | grep 3. && python -m unittest tests/test_dash_import.py
            TESTFILES=$(circleci tests glob "tests/integration/**/test_*.py" | circleci tests split --split-by=timings)
            pytest --headless --nopercyfinalize --junitxml=test-reports/junit_intg.xml ${TESTFILES}
            
            

  build-dash-39: &build-dash
    working_directory: ~/project
    docker:
      - image: circleci/python:3.9.2-buster-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
            PYTHON_VERSION: py39
    steps:
      - checkout
      - run: echo $PYTHON_VERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
      - run:
          name: 🐍 pip dev requirements
          command: |
            sudo pip install virtualenv --upgrade
            python -m venv venv || virtualenv venv && . venv/bin/activate
            set -eo pipefail
            pip install --progress-bar off --no-cache-dir -r dev-requirements.txt
      - save_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
          paths:
              - venv
      - run:
          name: 🏗️ build dash
          command: |
            . venv/bin/activate && mkdir packages
            set -eo pipefail
            # build main dash & renderer
            git clone --depth 1 https://github.com/plotly/dash.git dash-main
            cd dash-main && pip install -e .[dev] --progress-bar off && renderer build
            python setup.py sdist && mv dist/* ../packages/ && cd ..
            # build html
            git clone --depth 1 https://github.com/plotly/dash-html-components.git
            cd dash-html-components && npm ci && npm run build
            python setup.py sdist && mv dist/* ../packages && cd ..
            # build dcc
            npm ci && npm run build && python setup.py sdist && mv dist/* ./packages && ls -la packages
      - persist_to_workspace:
          root: ~/project
          paths:
            - packages


  test-39: &test
    working_directory: ~/project
    docker:
      - image: circleci/python:3.9.2-buster-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
            PYTHON_VERSION: py39
            PERCY_PARALLEL_TOTAL: -1
            PERCY_ENABLE: 1
    parallelism: 3
    steps:
      - checkout
      - run: echo $PYTHON_VERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "dev-requirements.txt" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: 🧪 Run Integration Tests
          command: |
            . venv/bin/activate && rm -rf dash_core_components && ls -la
            set -eo pipefail
            cd packages && mv dash-*.tar.gz main.tar.gz && ls -la
            find . -name "dash_*.gz" | xargs pip install -I --progress-bar off --no-cache-dir
            pip install --no-cache-dir --progress-bar off main.tar.gz[dev,testing]
            pip list | grep dash | xargs pip show && cd ..
            echo $(python -V 2>&1) | grep 3. && python -m unittest tests/test_dash_import.py
            TESTFILES=$(circleci tests glob "tests/integration/**/test_*.py" | circleci tests split --split-by=timings)
            pytest --headless --nopercyfinalize --junitxml=test-reports/junit_intg.xml ${TESTFILES}
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: /tmp/dash_artifacts



workflows:
  version: 2
  python3.9:
    jobs:
      - build-medium-arm64
      - build-dash-39
      - test-39:
          requires:
            - build-dash-39
